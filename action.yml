name: "Dokploy Deployment with GitHub secrets and variables"
description: "Trigger a Dokploy deployment with GitHub secrets and variables"
branding:
  icon: "box"
  color: "gray-dark"
inputs:
  dokploy_url:
    description: "Dokploy base URL, e.g. https://dokploy.example.com"
    required: true
  api_key:
    description: "Dokploy API key"
    required: true
  application_id:
    description: "Dokploy application/compose ID"
    required: true
  service_type:
    description: "Type of service (application,compose)"
    required: false
    default: "application"
  deploy:
    description: "Boolean flag to trigger deployment"
    required: false
    default: true
  secrets:
    description: "secrets for the application"
    required: false
    default: null
  vars:
    description: "variables for the application"
    required: false
    default: null
runs:
  using: "composite"
  steps:
    - name: Validate deployment type
      shell: bash
      run: |
        case "${{ inputs.service_type }}" in
          application|compose)
            echo "Valid service type: ${{ inputs.service_type }}"
            ;;
          *)
            echo "Invalid service type: ${{ inputs.service_type }}"
            exit 1
            ;;
        esac
    
    - name: Set Environment Variables
      if: ${{ inputs.secrets != null || inputs.vars != null }}
      shell: bash
      run: |
        format_json() {
          local secrets="$1"
          # converts the JSON to string for inclusion in Dokploy application.saveEnvironment JSON body
          # Also ignores github_ and GITHUB_ environment variables
          echo "$secrets" | jq -r 'to_entries | map(select(.key | test("^(github_|GITHUB_)") | not)) | .[] | "\(.key)=\(.value)"'
        }

        # Extracting both secrets & variables
        formatted_secrets=$(format_json '${{ inputs.secrets }}')
        formatted_vars=$(format_json '${{ inputs.vars }}')

        # escaping special characters
        envs=$(printf "%s\n%s" "$formatted_secrets" "$formatted_vars" | jq -Rs .)

        response=$(curl -X 'POST' \
          "${{ inputs.dokploy_url }}/api/application.saveEnvironment" \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json' \
          -H "x-api-key: ${{ inputs.api_key }}" \
          -d "{\"${{ inputs.service_type }}Id\": \"${{ inputs.application_id }}\", \"env\": $envs }" \
          -w "%{http_code}" \
          -o /dev/null \
          -s)
        if [ "$response" -ne 200 ]; then
          echo "Setting environment variables failed with status code: $response"
          exit 1
        fi

    - name: Trigger Dokploy deployment
      if: ${{ inputs.deploy == 'true' }}
      shell: bash
      run: |
        response=$(curl -X 'POST' \
          "${{ inputs.dokploy_url }}/api/${{ inputs.service_type }}.deploy" \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json' \
          -H "x-api-key: ${{ inputs.api_key }}" \
          -d "{\"${{ inputs.service_type }}Id\": \"${{ inputs.application_id }}\"}" \
          -w "%{http_code}" \
          -o /dev/null \
          -s)
        if [ "$response" -ne 200 ]; then
          echo "Deployment failed with status code: $response"
          exit 1
        fi
